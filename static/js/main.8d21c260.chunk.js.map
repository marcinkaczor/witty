{"version":3,"sources":["content/index.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["photos","id","desc","src","App","className","map","key","alt","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAiDeA,G,KA3Ca,CAC1B,CACEC,GAAI,EACJC,KAAM,cACNC,IAAK,0CAEP,CACEF,GAAI,EACJC,KAAM,eACNC,IAAK,0CAEP,CACEF,GAAI,EACJC,KAAM,aACNC,IAAK,0CAEP,CACEF,GAAI,EACJC,KAAM,cACNC,IAAK,0CAEP,CACEF,GAAI,EACJC,KAAM,gBACNC,IAAK,0CAEP,CACEF,GAAI,EACJC,KAAM,gBACNC,IAAK,0CAEP,CACEF,GAAI,EACJC,KAAM,eACNC,IAAK,0CAEP,CACEF,GAAI,EACJC,KAAM,iBACNC,IAAK,4C,KCrBMC,MApBf,WACE,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,QACb,0BAAMA,UAAU,cAAhB,UAEF,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,QACZL,EAAOM,KAAI,gBAAGL,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,IAAb,OACV,yBAAKI,IAAKN,EAAII,UAAU,QACtB,wBAAIA,UAAU,eAAeH,GAC7B,yBAAKG,UAAU,YAAYF,IAAKA,EAAKK,IAAKP,EAAGQ,oBCFrCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d21c260.chunk.js","sourcesContent":["interface PhotoItem {\n  id: number;\n  desc: string,\n  src: string\n}\n\nconst photos: PhotoItem[] = [\n  {\n    id: 0,\n    desc: 'Coastal bay',\n    src: 'https://picsum.photos/600/400?image=14'\n  },\n  {\n    id: 1,\n    desc: 'Ancient book',\n    src: 'https://picsum.photos/600/400?image=24'\n  },\n  {\n    id: 2,\n    desc: 'Oil barrel',\n    src: 'https://picsum.photos/600/400?image=34'\n  },\n  {\n    id: 3,\n    desc: 'Foggy coast',\n    src: 'https://picsum.photos/600/400?image=44'\n  },\n  {\n    id: 4,\n    desc: 'Mountain peak',\n    src: 'https://picsum.photos/600/400?image=54'\n  },\n  {\n    id: 5,\n    desc: 'Sunshine girl',\n    src: 'https://picsum.photos/600/400?image=64'\n  },\n  {\n    id: 6,\n    desc: 'Lone boatman',\n    src: 'https://picsum.photos/600/400?image=74'\n  },\n  {\n    id: 7,\n    desc: 'Shining bridge',\n    src: 'https://picsum.photos/600/400?image=84'\n  }\n]\n\nexport default photos\n","import React from 'react'\nimport photos from '../../content'\nimport './App.css'\n\nfunction App () {\n  return (\n    <div className='container'>\n      <div className='logo'>\n        <span className='logo__text'>WITTY</span>\n      </div>\n      <div className='header' />\n      <div className='sidebar' />\n      <div className='main'>\n        {photos.map(({ id, desc, src }) => (\n          <div key={id} className='meme'>\n            <h1 className='meme__title'>{desc}</h1>\n            <img className='meme__img' src={src} alt={id.toString()} />\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","/* global fetch ServiceWorkerRegistration */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}