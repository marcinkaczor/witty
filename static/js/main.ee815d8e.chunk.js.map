{"version":3,"sources":["components/Fetcher/index.tsx","components/Fetcher/Fetcher.tsx","components/App/App.tsx","constants/api.tsx","serviceWorker.ts","index.tsx"],"names":["useFetcher","url","page","useState","data","setData","loading","setLoading","error","setError","hasMore","setHasMore","useEffect","a","axios","method","params","limit","response","prevData","length","fetchData","App","setPage","observer","useRef","lastDataItemRef","useCallback","node","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","className","map","i","id","author","key","ref","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"wRAEeA,ECWI,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,KAAqB,EACtBC,mBAAsB,IADA,mBACvCC,EADuC,KACjCC,EADiC,OAEhBF,oBAAS,GAFO,mBAEvCG,EAFuC,KAE9BC,EAF8B,OAGpBJ,mBAAS,MAHW,mBAGvCK,EAHuC,KAGhCC,EAHgC,OAKhBN,oBAAS,GALO,mBAKvCO,EALuC,KAK9BC,EAL8B,KA0B9C,OAnBAC,qBAAU,YACO,uCAAG,iCAAAC,EAAA,6DAASZ,EAAT,EAASA,IAAKC,EAAd,EAAcA,KAC9BK,GAAW,GADK,kBAISO,IAAM,CAAEC,OAAQ,MAAOd,MAAKe,OAAQ,CAAEd,OAAMe,MAAO,MAJ5D,OAIRC,EAJQ,OAMdb,GAAQ,SAACc,GAAD,4BAAkBA,GAAlB,YAA+BD,EAASd,UAChDO,EAAWO,EAASd,KAAKgB,OAAS,GAPpB,kDASdX,EAAS,EAAD,IATM,yBAWdF,GAAW,GAXG,6EAAH,sDAefc,CAAU,CAAEpB,MAAKC,WAChB,CAACD,EAAKC,IAEF,CAAEE,OAAME,UAASE,QAAOE,Y,MCKlBY,MArCf,WAAiB,IAAD,EACUnB,mBAAS,GADnB,mBACPD,EADO,KACDqB,EADC,OAE4BvB,EAAW,CAAEC,ICR5B,gCDQ2CC,SAA9DE,EAFM,EAENA,KAAME,EAFA,EAEAA,QAASE,EAFT,EAESA,MAAOE,EAFhB,EAEgBA,QAExBc,EAAWC,mBACXC,EAAkBC,uBAAY,SAAAC,GAC9BtB,IACAkB,EAASK,SAASL,EAASK,QAAQC,aACvCN,EAASK,QAAU,IAAIE,sBAAqB,SAAAC,GACtCA,EAAQ,GAAGC,gBAAkBvB,GAC/Ba,GAAQ,SAAArB,GAAI,OAAIA,EAAO,QAGvB0B,GAAMJ,EAASK,QAAQK,QAAQN,MAClC,CAACtB,EAASI,IAEb,OACE,yBAAKyB,UAAU,aACb,yBAAKA,UAAU,QACb,0BAAMA,UAAU,cAAhB,UAEF,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,QACZ/B,EAAKgC,KAAI,WAAiBC,EAAjB,OAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAenB,EAAtB,EAAsBA,OAAtB,OACR,yBAAKoB,IAAKF,EAAIH,UAAU,OAAOM,IAAKJ,EAAI,IAAMjB,EAASM,EAAkB,MACvE,wBAAIS,UAAU,eAAeI,GAC7B,yBAAKJ,UAAU,YAAYO,IAAG,UClCb,wBDkCa,eAAoBJ,EAApB,YAAkCK,IAAKL,QAGxEhC,GAAW,cACXE,GAAS,WExBEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLoD,QAAQpD,MAAMA,EAAMqD,c","file":"static/js/main.ee815d8e.chunk.js","sourcesContent":["import useFetcher from './Fetcher'\n\nexport default useFetcher\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\ninterface IFetcher {\n  url: string,\n  page: number\n}\n\ninterface IDataItem {\n  id: string,\n  author: string\n}\n\nconst useFetcher = ({ url, page }: IFetcher) => {\n  const [data, setData] = useState<IDataItem[]>([])\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const [hasMore, setHasMore] = useState(true)\n\n  useEffect(() => {\n    const fetchData = async ({ url, page }: IFetcher) => {\n      setLoading(true)\n\n      try {\n        const response = await axios({ method: 'GET', url, params: { page, limit: 10 } })\n\n        setData((prevData) => [...prevData, ...response.data])\n        setHasMore(response.data.length > 0)\n      } catch (e) {\n        setError(e)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchData({ url, page })\n  }, [url, page])\n\n  return { data, loading, error, hasMore }\n}\n\nexport default useFetcher\n","/* global IntersectionObserver */\nimport React, { useState, useRef, useCallback } from 'react'\nimport useFetcher from '../Fetcher'\nimport * as API from '../../constants/api'\n\nimport './App.css'\n\nfunction App () {\n  const [page, setPage] = useState(1)\n  const { data, loading, error, hasMore } = useFetcher({ url: API.LIST, page })\n\n  const observer = useRef<IntersectionObserver>()\n  const lastDataItemRef = useCallback(node => {\n    if (loading) return\n    if (observer.current) observer.current.disconnect()\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPage(page => page + 1)\n      }\n    })\n    if (node) observer.current.observe(node)\n  }, [loading, hasMore])\n\n  return (\n    <div className='container'>\n      <div className='logo'>\n        <span className='logo__text'>WITTY</span>\n      </div>\n      <div className='header' />\n      <div className='sidebar' />\n      <div className='main'>\n        {data.map(({ id, author }, i, { length }) => (\n          <div key={id} className='meme' ref={i + 1 === length ? lastDataItemRef : null}>\n            <h1 className='meme__title'>{author}</h1>\n            <img className='meme__img' src={`${API.ROOT}/id/${id}/600/400`} alt={id} />\n          </div>\n        ))}\n        {loading && 'Loading ...'}\n        {error && 'Error'}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","export const ROOT : string = 'https://picsum.photos'\nexport const LIST : string = 'https://picsum.photos/v2/list'\n","/* global fetch ServiceWorkerRegistration */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}